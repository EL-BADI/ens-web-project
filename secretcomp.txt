package compiler;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

public class compiler {
    public static void main(String[] args) {
        JFrame window = new JFrame("Compilation");
        window.setSize(600, 400);
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Text area
        JTextArea textArea = new JTextArea();
        textArea.setEditable(true);
        JScrollPane textScrollPane = new JScrollPane(textArea);

        // Button
        JButton analyzeBtn = new JButton("Analyze");
        analyzeBtn.setBackground(Color.decode("#4CAF50"));
        analyzeBtn.setForeground(Color.WHITE);
        analyzeBtn.setFocusPainted(false);

        // Panel for button
        JPanel btnPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        btnPanel.add(analyzeBtn);

        // Add components to the window
        window.setLayout(new BorderLayout());
        window.add(textScrollPane, BorderLayout.CENTER);
        window.add(btnPanel, BorderLayout.SOUTH);

        window.setVisible(true);

        // Button action listener
        analyzeBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String userInput = textArea.getText();
                String[] inputParts = userInput.split(" ");

                ArrayList<String> identifier = new ArrayList<>();
                ArrayList<String> motCle = new ArrayList<>();
                ArrayList<String> constants = new ArrayList<>();
                ArrayList<String> other = new ArrayList<>();
                ArrayList<String> comments = new ArrayList<>();

                for (String token : inputParts) {
                    if (isBlockComment(token)) {
                        comments.add(token);
                    } else if (KeywordChecker.isKeyword(token)) {
                        motCle.add(token);
                    } else if (token.matches("[a-zA-Z]+") && token.length() <= 5) {
                        identifier.add(token);
                    } else if (token.matches("[0-9]+")) {
                        constants.add(token);
                    } else {
                        other.add(token);
                    }
                }

                // Generate data for table
                int rowCount = Math.max(identifier.size(), Math.max(constants.size(), Math.max(motCle.size(), Math.max(comments.size(), other.size()))));
                Object[][] generatedRows = new Object[rowCount][5];
                for (int i = 0; i < rowCount; i++) {
                    generatedRows[i][0] = i < identifier.size() ? identifier.get(i) : "";
                    generatedRows[i][1] = i < constants.size() ? constants.get(i) : "";
                    generatedRows[i][2] = i < motCle.size() ? motCle.get(i) : "";
                    generatedRows[i][3] = i < comments.size() ? comments.get(i) : "";
                    generatedRows[i][4] = i < other.size() ? other.get(i) : "";
                }

                // Final step
                new TokenTable(generatedRows);
            }
        });
    }

    public static boolean isBlockComment(String token) {
        if (token.length() < 4)
            return false;

        return token.startsWith("/*") && token.endsWith("*/");
    }

    public static class KeywordChecker {
        private static final Set<String> KEYWORDS = new HashSet<>();

        static {
            KEYWORDS.add("BEGIN");
            KEYWORDS.add("END");
            KEYWORDS.add("INTEGER");
            KEYWORDS.add("FLOAT");
            KEYWORDS.add("CHAR");
            KEYWORDS.add("STRING");
            KEYWORDS.add("IF");
            KEYWORDS.add("ELSE");
            KEYWORDS.add("FOR");
            KEYWORDS.add("WHILE");
        }

        public static boolean isKeyword(String token) {
            return KEYWORDS.contains(token);
        }
    }

    public static class TokenTable extends JFrame {
        private JTable table;
        private DefaultTableModel model;

        public TokenTable(Object[][] generatedRows) {
            setTitle("Token Analysis");
            setBounds(600,200,600, 400);
            setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            String[] columns = {"Identifier", "Constants", "Keywords", "Comments", "Others"};

            model = new DefaultTableModel(columns, 0);

            table = new JTable(model);
            table.setGridColor(Color.GRAY);
            table.setFillsViewportHeight(true);
            table.getTableHeader().setBackground(Color.decode("#4CAF50"));
            table.getTableHeader().setForeground(Color.WHITE);

            for (Object[] row : generatedRows) {
                model.addRow(row);
            }

            JScrollPane scrollPane = new JScrollPane(table);
            getContentPane().add(scrollPane);

            setVisible(true);
        }
    }
}
